apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: frontend
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    kubernetes.io/ingress.class: nginx
spec:
  rules:
    - host: kuberpoets${HOSTNAME_INFIX}.${DOMAIN}
      http: &http_rules
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: frontend
                port:
                  number: 3000
  tls:
    - secretName: kuberpoets${HOSTNAME_INFIX}-tls
      hosts:
        - kuberpoets${HOSTNAME_INFIX}.${DOMAIN}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: frontend
data:
  DIST_DIR: '${DIST_DIR}'
  VERSION: '${VERSION}'
  API_URL: '${API_URL}'
---
apiVersion: v1
kind: Service
metadata:
  name: frontend
spec:
  type: NodePort
  ports:
    - port: 3000
      targetPort: 3000
  selector:
    app: frontend
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  annotations: &annotations
    reloader.stakater.com/auto: 'true'
  labels: &labels
    app: frontend
spec:
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      annotations: *annotations
      labels: *labels
    spec:
      containers:
        - name: frontend
          image: ${REGISTRY_SLASH}frontend:${VERSION}
          imagePullPolicy: Always
          envFrom: &envFrom
            - configMapRef:
                name: frontend
          livenessProbe:
            httpGet:
              path: /env.js
              port: 3000
            initialDelaySeconds: 20
            periodSeconds: 30
          startupProbe:
            httpGet:
              path: /env.js
              port: 3000
            failureThreshold: 30
            periodSeconds: 10
          ports:
            - containerPort: 3000
---

